{"ast":null,"code":"var _jsxFileName = \"/home/hmaserv/Desktop/github/todo-app/src/views/pages/WeatherPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { getUID, LocalStorage, ENDPOINTS, getCurrentLocation, callApi } from 'src/utils';\nimport { ModalForm, Task, WeatherCard } from 'src/components';\nimport Tabs from '@mui/material/Tabs';\nimport Tab from '@mui/material/Tab';\nimport Box from '@mui/material/Box';\nimport moment from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function WeatherPage() {\n  _s();\n  const [isLoading, setisLoading] = useState(false);\n  const [weatherList, setWeatherList] = useState([]);\n  const [weatherDataArr, setWeatherDataArr] = useState([]);\n  const [value, setValue] = useState(0);\n  const numberOfDay = 24 / 3;\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n    setWeatherDataArr(weatherList[newValue]);\n  };\n  const getWeatherData = async () => {\n    let coordinates = await getCurrentLocation();\n    try {\n      setisLoading(true);\n      let {\n        list\n      } = await callApi({\n        method: ENDPOINTS.getHourlyWeather.method,\n        url: `${ENDPOINTS.getHourlyWeather.url}?lat=${coordinates === null || coordinates === void 0 ? void 0 : coordinates.lat}&lon=${coordinates === null || coordinates === void 0 ? void 0 : coordinates.lon}&appid=${process.env.REACT_APP_WEATHER_API_KEY}`\n      });\n      const res = list.reduce((acc, curr, i) => {\n        if (!(i % numberOfDay)) {\n          // if index is 0 or can be divided by the `size`...\n          acc.push(list.slice(i, i + numberOfDay)); // ..push a chunk of the original array to the accumulator\n        }\n        return acc;\n      }, []);\n      console.log('res', res);\n      setWeatherList(res);\n\n      // setWeatherData(data);\n    } catch (err) {} finally {\n      setisLoading(false);\n    }\n  };\n  useEffect(() => {\n    getWeatherData();\n    console.log('moment(1703991600).format(dddd)', moment(1703980800).format('dddd')); //dt 1703980800 moment(1703980800).format('dddd')\n    //dt_txt 2023-12-31 00:00:00 moment('2023-12-31 00:00:00').format('dddd')\n    console.log('moment(2023-12-31 00:00:00).format(dddd)', moment('2023-12-31 00:00:00').format('dddd')); //dt \n  }, []);\n  useEffect(() => {\n    getWeatherData();\n    console.log('moment(1703991600).format(dddd)', moment(1703980800).format('dddd')); //dt \n    //dt_txt 2023-12-31 00:00:00\n    console.log('moment(2023-12-31 00:00:00).format(dddd)', moment('2023-12-31 00:00:00').format('dddd')); //dt \n  }, [weatherDataArr]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      bgcolor: 'background.paper',\n      display: 'flex',\n      justifyContent: 'center'\n    },\n    children: /*#__PURE__*/_jsxDEV(Tabs, {\n      value: value,\n      onChange: handleChange,\n      variant: \"scrollable\",\n      scrollButtons: \"auto\",\n      \"aria-label\": \"scrollable auto tabs example\",\n      children: weatherList.map((weatherListItem, index) => /*#__PURE__*/_jsxDEV(Tab, {\n        label: moment(weatherListItem[0].dt_txt).format('dddd')\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 51\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n_s(WeatherPage, \"GNC/hGq45dxm3NWxiB5VutD8fs0=\");\n_c = WeatherPage;\nvar _c;\n$RefreshReg$(_c, \"WeatherPage\");","map":{"version":3,"names":["React","useEffect","useState","getUID","LocalStorage","ENDPOINTS","getCurrentLocation","callApi","ModalForm","Task","WeatherCard","Tabs","Tab","Box","moment","jsxDEV","_jsxDEV","WeatherPage","_s","isLoading","setisLoading","weatherList","setWeatherList","weatherDataArr","setWeatherDataArr","value","setValue","numberOfDay","handleChange","event","newValue","getWeatherData","coordinates","list","method","getHourlyWeather","url","lat","lon","process","env","REACT_APP_WEATHER_API_KEY","res","reduce","acc","curr","i","push","slice","console","log","err","format","sx","bgcolor","display","justifyContent","children","onChange","variant","scrollButtons","map","weatherListItem","index","label","dt_txt","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/hmaserv/Desktop/github/todo-app/src/views/pages/WeatherPage.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { getUID, LocalStorage, ENDPOINTS, getCurrentLocation, callApi } from 'src/utils';\nimport { ModalForm, Task, WeatherCard } from 'src/components';\nimport Tabs from '@mui/material/Tabs';\nimport Tab from '@mui/material/Tab';\nimport Box from '@mui/material/Box';\nimport moment from 'moment'\n\nexport default function WeatherPage() {\n  const [isLoading, setisLoading] = useState(false);\n  const [weatherList, setWeatherList] = useState([]);\n  const [weatherDataArr, setWeatherDataArr] = useState([]);\n\n  const [value, setValue] = useState(0);\n  const numberOfDay = 24/3;\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n    setWeatherDataArr(weatherList[newValue])\n  };\n  const getWeatherData = async () => {\n    let coordinates = await getCurrentLocation();\n    try {\n      setisLoading(true);\n      let {list} = await callApi({\n        method: ENDPOINTS.getHourlyWeather.method,\n        url: `${ENDPOINTS.getHourlyWeather.url}?lat=${coordinates?.lat}&lon=${coordinates?.lon}&appid=${process.env.REACT_APP_WEATHER_API_KEY}`,\n      });\n      const res = list.reduce((acc, curr, i) => {\n        if ( !(i % numberOfDay)  ) {    // if index is 0 or can be divided by the `size`...\n          acc.push(list.slice(i, i + numberOfDay));   // ..push a chunk of the original array to the accumulator\n        }\n        return acc;\n      }, []);\n      console.log('res',res);\n      setWeatherList(res)\n      \n      // setWeatherData(data);\n    } catch (err) {\n    } finally {\n      setisLoading(false);\n    }\n  };\n  useEffect(() => {\n    getWeatherData();\n    console.log('moment(1703991600).format(dddd)',moment(1703980800).format('dddd'));//dt 1703980800 moment(1703980800).format('dddd')\n    //dt_txt 2023-12-31 00:00:00 moment('2023-12-31 00:00:00').format('dddd')\n    console.log('moment(2023-12-31 00:00:00).format(dddd)',moment('2023-12-31 00:00:00').format('dddd'));//dt \n\n  }, []);\n  useEffect(() => {\n    getWeatherData();\n    console.log('moment(1703991600).format(dddd)',moment(1703980800).format('dddd'));//dt \n    //dt_txt 2023-12-31 00:00:00\n    console.log('moment(2023-12-31 00:00:00).format(dddd)',moment('2023-12-31 00:00:00').format('dddd'));//dt \n\n  }, [weatherDataArr]);\n  \n\n  return (\n    <Box sx={{ bgcolor: 'background.paper', display: 'flex', justifyContent: 'center' }}>\n      <Tabs value={value} onChange={handleChange} variant='scrollable' scrollButtons='auto' aria-label='scrollable auto tabs example'>\n        {weatherList.map((weatherListItem,index)=><Tab label={moment(weatherListItem[0].dt_txt).format('dddd')} key={index} />)}\n      </Tabs>\n    </Box>\n  );\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,MAAM,EAAEC,YAAY,EAAEC,SAAS,EAAEC,kBAAkB,EAAEC,OAAO,QAAQ,WAAW;AACxF,SAASC,SAAS,EAAEC,IAAI,EAAEC,WAAW,QAAQ,gBAAgB;AAC7D,OAAOC,IAAI,MAAM,oBAAoB;AACrC,OAAOC,GAAG,MAAM,mBAAmB;AACnC,OAAOC,GAAG,MAAM,mBAAmB;AACnC,OAAOC,MAAM,MAAM,QAAQ;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE3B,eAAe,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACpC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACmB,WAAW,EAAEC,cAAc,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACqB,cAAc,EAAEC,iBAAiB,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;EAExD,MAAM,CAACuB,KAAK,EAAEC,QAAQ,CAAC,GAAGxB,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAMyB,WAAW,GAAG,EAAE,GAAC,CAAC;EACxB,MAAMC,YAAY,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK;IACxCJ,QAAQ,CAACI,QAAQ,CAAC;IAClBN,iBAAiB,CAACH,WAAW,CAACS,QAAQ,CAAC,CAAC;EAC1C,CAAC;EACD,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAIC,WAAW,GAAG,MAAM1B,kBAAkB,CAAC,CAAC;IAC5C,IAAI;MACFc,YAAY,CAAC,IAAI,CAAC;MAClB,IAAI;QAACa;MAAI,CAAC,GAAG,MAAM1B,OAAO,CAAC;QACzB2B,MAAM,EAAE7B,SAAS,CAAC8B,gBAAgB,CAACD,MAAM;QACzCE,GAAG,EAAG,GAAE/B,SAAS,CAAC8B,gBAAgB,CAACC,GAAI,QAAOJ,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEK,GAAI,QAAOL,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEM,GAAI,UAASC,OAAO,CAACC,GAAG,CAACC,yBAA0B;MACxI,CAAC,CAAC;MACF,MAAMC,GAAG,GAAGT,IAAI,CAACU,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,EAAEC,CAAC,KAAK;QACxC,IAAK,EAAEA,CAAC,GAAGnB,WAAW,CAAC,EAAI;UAAK;UAC9BiB,GAAG,CAACG,IAAI,CAACd,IAAI,CAACe,KAAK,CAACF,CAAC,EAAEA,CAAC,GAAGnB,WAAW,CAAC,CAAC,CAAC,CAAG;QAC9C;QACA,OAAOiB,GAAG;MACZ,CAAC,EAAE,EAAE,CAAC;MACNK,OAAO,CAACC,GAAG,CAAC,KAAK,EAACR,GAAG,CAAC;MACtBpB,cAAc,CAACoB,GAAG,CAAC;;MAEnB;IACF,CAAC,CAAC,OAAOS,GAAG,EAAE,CACd,CAAC,SAAS;MACR/B,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EACDnB,SAAS,CAAC,MAAM;IACd8B,cAAc,CAAC,CAAC;IAChBkB,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAACpC,MAAM,CAAC,UAAU,CAAC,CAACsC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;IACjF;IACAH,OAAO,CAACC,GAAG,CAAC,0CAA0C,EAACpC,MAAM,CAAC,qBAAqB,CAAC,CAACsC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;EAEvG,CAAC,EAAE,EAAE,CAAC;EACNnD,SAAS,CAAC,MAAM;IACd8B,cAAc,CAAC,CAAC;IAChBkB,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAACpC,MAAM,CAAC,UAAU,CAAC,CAACsC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;IACjF;IACAH,OAAO,CAACC,GAAG,CAAC,0CAA0C,EAACpC,MAAM,CAAC,qBAAqB,CAAC,CAACsC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;EAEvG,CAAC,EAAE,CAAC7B,cAAc,CAAC,CAAC;EAGpB,oBACEP,OAAA,CAACH,GAAG;IAACwC,EAAE,EAAE;MAAEC,OAAO,EAAE,kBAAkB;MAAEC,OAAO,EAAE,MAAM;MAAEC,cAAc,EAAE;IAAS,CAAE;IAAAC,QAAA,eAClFzC,OAAA,CAACL,IAAI;MAACc,KAAK,EAAEA,KAAM;MAACiC,QAAQ,EAAE9B,YAAa;MAAC+B,OAAO,EAAC,YAAY;MAACC,aAAa,EAAC,MAAM;MAAC,cAAW,8BAA8B;MAAAH,QAAA,EAC5HpC,WAAW,CAACwC,GAAG,CAAC,CAACC,eAAe,EAACC,KAAK,kBAAG/C,OAAA,CAACJ,GAAG;QAACoD,KAAK,EAAElD,MAAM,CAACgD,eAAe,CAAC,CAAC,CAAC,CAACG,MAAM,CAAC,CAACb,MAAM,CAAC,MAAM;MAAE,GAAMW,KAAK;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV;AAACnD,EAAA,CAzDuBD,WAAW;AAAAqD,EAAA,GAAXrD,WAAW;AAAA,IAAAqD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}