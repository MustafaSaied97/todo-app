{"version":3,"file":"static/js/788.395ef254.chunk.js","mappings":"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","sources":["views/pages/TodoPage.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Stack from '@mui/material/Stack';\nimport Fab from '@mui/material/Fab';\nimport Tooltip from '@mui/material/Tooltip';\nimport AddIcon from '@mui/icons-material/Add';\nimport Skeleton from '@mui/material/Skeleton';\n  import { useAlertContext } from 'src/context/alertContext';\n\nimport { getUID,LocalStorage, ENDPOINTS, getCurrentLocation,callApi } from 'src/utils';\nimport { ModalForm, Task,WeatherCard } from 'src/components';\nimport moment from 'moment'\nimport emptyTasksImg from 'src/assets/images/empty-tasks.png'\nconst defaultTaskData = {\n  title: '',\n  description: '',\n\n  created_at: '',\n\n  is_archived:false,\n  archive_at: '',\n\n  is_checked: false,\n  finished_at: '',\n};\nexport default function TodoPage() {\n  const [isOpenModal, setIsOpenModal] = useState(false);\n  const [mode, setMode] = useState('add');\n  const [tasks, setTasks] = useState([]);\n  const [task, setTask] = useState({});\n  const [weatherData, setWeatherData] = useState({})\n  const [isLoading, setisLoading] = useState(false)\n  const { onOpen } = useAlertContext();\n  const handleOpenModal = ({ modeType, taskData }) => {\n    if (!modeType || !Object.keys(taskData).length) return;\n    setTask(taskData);\n    setMode(modeType);\n    setIsOpenModal(true);\n  };\n  const handleCloseModal = () => {\n    setTask(defaultTaskData);\n    setIsOpenModal(false);\n  };\n  const actions = {\n    openAddModal: () => handleOpenModal({ modeType: 'add', taskData: defaultTaskData }),\n    openEditModal: (taskData) => {handleOpenModal({ modeType: 'edit', taskData: taskData }) },\n    openInfoModal: (taskData) => handleOpenModal({ modeType: 'info', taskData: taskData }),\n    onAddItem:(taskData)=>{\n      const tasksClone=[...tasks]\n      const taskDataWithId={\n        ...taskData,\n        id:getUID(),\n        created_at:moment().format('lll'),\n      }\n      tasksClone.push(taskDataWithId)\n      setTasks(tasksClone)\n      handleCloseModal()\n    },\n    onEditItem:(taskData)=>{\n      const tasksClone=tasks.map((taskItem)=>taskItem.id===taskData.id? taskData : taskItem)\n      setTasks(tasksClone)\n      handleCloseModal()\n    },\n    onDeleteItem:(taskData)=>{\n      const tasksClone=tasks.filter((taskItem)=>taskData.id!==taskItem.id)\n      setTasks(tasksClone)\n    },\n    onToggleArchiveItem:(taskData)=>{\n      const tasksClone=tasks.map((taskItem)=>{\n        if(taskItem.id===taskData.id){\n          const newArchiveState=!taskData.is_archived\n          onOpen({type:'success',message:`${taskData.title} ${newArchiveState?'archived':'removed from archived'}`})\n          return{\n            ...taskData,\n            is_archived:newArchiveState,\n            archive_at:newArchiveState?moment().format('lll'):''\n          }\n        }else{\n          return{...taskItem}\n        }\n      })\n      setTasks(tasksClone)\n    },\n    onToggleCheckedItem:(taskData)=>{\n      const tasksClone=tasks.map((taskItem)=>{\n        if(taskItem.id===taskData.id){\n          const newCheckedState=!taskData.is_checked\n          return{\n            ...taskData,\n            is_checked:newCheckedState,\n            finished_at:newCheckedState?moment().format('lll'):''\n          }\n        }else{\n          return{...taskItem}\n        }\n      })\n      setTasks(tasksClone)\n    },\n\n  };\n  const getWeatherData = async () => {\n    let coordinates=await getCurrentLocation()\n    try {\n      setisLoading(true)\n      let data = await callApi({\n        method: ENDPOINTS.getCurrentWeather.method,\n        url: `${ENDPOINTS.getCurrentWeather.url}?lat=${coordinates?.lat}&lon=${coordinates?.lon}&appid=${process.env.REACT_APP_WEATHER_API_KEY}`,\n      }        \n      );\n      setWeatherData(data)\n    } catch (err) {\n    } finally {\n      setisLoading(false)\n    }\n  };\n  useEffect(()=>{\n    if(tasks.length===0){\n      LocalStorage({type:'set',key:'tasks',value:[]})\n      return\n    }  \n    LocalStorage({type:'set',key:'tasks',value:tasks})\n    \n  },[tasks])\n  useEffect(()=>{\n    const tasksLocal = LocalStorage({type:'get',key:'tafesks'})||[]\n    setTasks([...tasksLocal])\n    getWeatherData()\n  },[])\n \n\n  return (\n    <section>\n      <ModalForm open={isOpenModal} mode={mode} handleClose={handleCloseModal} data={task} actions={actions} />\n      <Stack sx={{ pt: 1 }} spacing={{ xs: 2, sm: 2 }} direction='row' useFlexGap flexWrap='wrap' justifyContent='center' alignItems='center'>\n      {/* */}\n      { Object.keys(weatherData).length&&!isLoading?\n        <WeatherCard \n          temp={weatherData?.main?.temp}\n          main={weatherData?.weather[0]?.main}\n          location={`${weatherData?.name},${weatherData?.sys?.country}`}\n          time={moment().format('lll')}\n          iconId={weatherData?.weather[0]?.icon}\n        />\n        :\n        <Skeleton animation=\"wave\" variant=\"rectangular\" sx={{width:{xs:\"80%\",sm:\"35%\"},borderRadius: 2}} height={150} />\n      }\n      </Stack>\n      <Stack sx={{ mt: 4 }} spacing={{ xs: 2, sm: 2 }} direction='row' useFlexGap flexWrap='wrap' justifyContent='flex-end' alignItems='center'>\n        <Tooltip title='Add task' arrow>\n          <Fab color='primary' aria-label='add' onClick={actions.openAddModal}>\n            <AddIcon />\n          </Fab>\n        </Tooltip>\n      </Stack>\n      {/* ListTasks  */}\n      <Stack spacing={5} sx={{ width: '100%', mt: 6 }} justifyContent='center'>\n        {tasks.map((taskItem, index) => (\n          <Task taskItem={taskItem} actions={actions} key={index} />\n        ))}\n        {!tasks.length&&<img src={emptyTasksImg}  style={{marginLeft:'auto',marginRight:'auto',width:'100%',maxWidth:'400px'}} alt=\"\" />}\n      </Stack>\n    </section>\n  );\n}\n"],"names":["defaultTaskData","title","description","created_at","is_archived","archive_at","is_checked","finished_at","TodoPage","_weatherData$main","_weatherData$weather$","_weatherData$sys","_weatherData$weather$2","isOpenModal","setIsOpenModal","useState","mode","setMode","tasks","setTasks","task","setTask","weatherData","setWeatherData","isLoading","setisLoading","onOpen","useAlertContext","handleOpenModal","_ref","modeType","taskData","Object","keys","length","handleCloseModal","actions","openAddModal","openEditModal","openInfoModal","onAddItem","tasksClone","taskDataWithId","id","getUID","moment","format","push","onEditItem","map","taskItem","onDeleteItem","filter","onToggleArchiveItem","newArchiveState","type","message","concat","onToggleCheckedItem","newCheckedState","useEffect","LocalStorage","key","value","tasksLocal","async","coordinates","getCurrentLocation","data","callApi","method","ENDPOINTS","getCurrentWeather","url","lat","lon","process","err","getWeatherData","_jsxs","children","_jsx","ModalForm","open","handleClose","Stack","sx","pt","spacing","xs","sm","direction","useFlexGap","flexWrap","justifyContent","alignItems","WeatherCard","temp","main","weather","location","name","sys","country","time","iconId","icon","Skeleton","animation","variant","width","borderRadius","height","mt","Tooltip","arrow","Fab","color","onClick","AddIcon","index","Task","src","emptyTasksImg","style","marginLeft","marginRight","maxWidth","alt"],"sourceRoot":""}